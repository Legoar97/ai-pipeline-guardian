stages:
  - test
  - build
  - deploy
  - publish

variables:
  DOCKER_DRIVER: overlay2
  IMAGE_NAME: gcr.io/$GCP_PROJECT_ID/ai-pipeline-guardian
  REGION: us-central1
  SERVICE_NAME: ai-pipeline-guardian

# Test de la aplicaciÃ³n
test:
  stage: test
  image: python:3.11
  script:
    - pip install -r requirements.txt
    - python -m pytest tests/ -v
  coverage: '/TOTAL.+?(\d+\%)/'

# Build de la imagen Docker
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo $GCP_SERVICE_KEY | docker login -u _json_key --password-stdin https://gcr.io
  script:
    - docker build -t $IMAGE_NAME:$CI_COMMIT_SHA .
    - docker tag $IMAGE_NAME:$CI_COMMIT_SHA $IMAGE_NAME:latest
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $IMAGE_NAME:latest
  only:
    - main
    - develop

# Deploy a Cloud Run
deploy:
  stage: deploy
  image: google/cloud-sdk:alpine
  before_script:
    - echo $GCP_SERVICE_KEY > /tmp/gcp-key.json
    - gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
    - gcloud config set project $GCP_PROJECT_ID
  script:
    - |
      gcloud run deploy ai-pipeline-guardian \
        --image $IMAGE_NAME:$CI_COMMIT_SHA \
        --platform managed \
        --region $REGION \
        --allow-unauthenticated \
        --port 8080 \
        --memory 1Gi \
        --cpu 2 \
        --timeout 300 \
        --max-instances 10 \
        --set-env-vars "GITLAB_WEBHOOK_SECRET=$GITLAB_WEBHOOK_SECRET,GCP_PROJECT_ID=$GCP_PROJECT_ID,GITLAB_ACCESS_TOKEN=$GITLAB_ACCESS_TOKEN"
  after_script:
    - rm -f /tmp/gcp-key.json
  only:
    - main
  environment:
    name: production
    url: https://ai-pipeline-guardian-$CI_PROJECT_ID.run.app

# Deploy staging (opcional)
deploy:staging:
  extends: deploy
  script:
    - |
      gcloud run deploy ai-pipeline-guardian-staging \
        --image $IMAGE_NAME:$CI_COMMIT_SHA \
        --platform managed \
        --region $REGION \
        --allow-unauthenticated \
        --port 8080 \
        --memory 512Mi \
        --cpu 1 \
        --timeout 300 \
        --max-instances 3 \
        --set-env-vars "GITLAB_WEBHOOK_SECRET=$GITLAB_WEBHOOK_SECRET,GCP_PROJECT_ID=$GCP_PROJECT_ID,GITLAB_ACCESS_TOKEN=$GITLAB_ACCESS_TOKEN"
  only:
    - develop
  environment:
    name: staging
    url: https://ai-pipeline-guardian-staging-$CI_PROJECT_ID.run.app

# Publish component to GitLab Catalog (NEW!)
publish:component:
  stage: publish
  image: alpine:latest
  script:
    - echo "Component published to GitLab Catalog"
  only:
    - tags
  when: manual